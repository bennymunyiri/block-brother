/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDeBridgeGateExtendedInterface extends ethers.utils.Interface {
  functions: {
    "callProxy()": FunctionFragment;
    "claim(bytes32,uint256,uint256,address,uint256,bytes,bytes)": FunctionFragment;
    "flash(address,address,uint256,bytes)": FunctionFragment;
    "getDebridgeChainAssetFixedFee(bytes32,uint256)": FunctionFragment;
    "getDefiAvaliableReserves(address)": FunctionFragment;
    "getNativeInfo(address)": FunctionFragment;
    "globalFixedNativeFee()": FunctionFragment;
    "globalTransferFeeBps()": FunctionFragment;
    "isSubmissionUsed(bytes32)": FunctionFragment;
    "requestReserves(address,uint256)": FunctionFragment;
    "returnReserves(address,uint256)": FunctionFragment;
    "send(address,uint256,uint256,bytes,bytes,bool,uint32,bytes)": FunctionFragment;
    "withdrawFee(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "callProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flash",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebridgeChainAssetFixedFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefiAvaliableReserves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNativeInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "globalFixedNativeFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalTransferFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSubmissionUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnReserves",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
      boolean,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "callProxy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebridgeChainAssetFixedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefiAvaliableReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalFixedNativeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalTransferFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubmissionUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;

  events: {
    "AutoRequestExecuted(bytes32,bool,address)": EventFragment;
    "Blocked(bytes32)": EventFragment;
    "CallProxyUpdated(address)": EventFragment;
    "ChainSupportUpdated(uint256,bool,bool)": EventFragment;
    "ChainsSupportUpdated(uint256,tuple,bool)": EventFragment;
    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)": EventFragment;
    "FixedNativeFeeAutoUpdated(uint256)": EventFragment;
    "FixedNativeFeeUpdated(uint256,uint256)": EventFragment;
    "Flash(address,address,address,uint256,uint256)": EventFragment;
    "MonitoringClaimEvent(bytes32,uint256,uint256)": EventFragment;
    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)": EventFragment;
    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)": EventFragment;
    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)": EventFragment;
    "Unblocked(bytes32)": EventFragment;
    "WithdrawnFee(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AutoRequestExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CallProxyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainsSupportUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeAutoUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedNativeFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Flash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringClaimEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MonitoringSendEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unblocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnFee"): EventFragment;
}

export type AutoRequestExecutedEvent = TypedEvent<
  [string, boolean, string] & {
    submissionId: string;
    success: boolean;
    callProxy: string;
  }
>;

export type BlockedEvent = TypedEvent<[string] & { submissionId: string }>;

export type CallProxyUpdatedEvent = TypedEvent<
  [string] & { callProxy: string }
>;

export type ChainSupportUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean] & {
    chainId: BigNumber;
    isSupported: boolean;
    isChainFrom: boolean;
  }
>;

export type ChainsSupportUpdatedEvent = TypedEvent<
  [
    BigNumber,
    [BigNumber, boolean, number] & {
      fixedNativeFee: BigNumber;
      isSupported: boolean;
      transferFeeBps: number;
    },
    boolean
  ] & {
    chainIds: BigNumber;
    chainSupportInfo: [BigNumber, boolean, number] & {
      fixedNativeFee: BigNumber;
      isSupported: boolean;
      transferFeeBps: number;
    };
    isChainFrom: boolean;
  }
>;

export type ClaimedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, BigNumber, string, boolean] & {
    submissionId: string;
    debridgeId: string;
    amount: BigNumber;
    receiver: string;
    nonce: BigNumber;
    chainIdFrom: BigNumber;
    autoParams: string;
    isNativeToken: boolean;
  }
>;

export type FixedNativeFeeAutoUpdatedEvent = TypedEvent<
  [BigNumber] & { globalFixedNativeFee: BigNumber }
>;

export type FixedNativeFeeUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    globalFixedNativeFee: BigNumber;
    globalTransferFeeBps: BigNumber;
  }
>;

export type FlashEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    sender: string;
    tokenAddress: string;
    receiver: string;
    amount: BigNumber;
    paid: BigNumber;
  }
>;

export type MonitoringClaimEventEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    submissionId: string;
    lockedOrMintedAmount: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type MonitoringSendEventEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    submissionId: string;
    nonce: BigNumber;
    lockedOrMintedAmount: BigNumber;
    totalSupply: BigNumber;
  }
>;

export type PairAddedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, number] & {
    debridgeId: string;
    tokenAddress: string;
    nativeAddress: string;
    nativeChainId: BigNumber;
    maxAmount: BigNumber;
    minReservesBps: number;
  }
>;

export type SentEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      receivedAmount: BigNumber;
      fixFee: BigNumber;
      transferFee: BigNumber;
      useAssetFee: boolean;
      isNativeToken: boolean;
    },
    string,
    string
  ] & {
    submissionId: string;
    debridgeId: string;
    amount: BigNumber;
    receiver: string;
    nonce: BigNumber;
    chainIdTo: BigNumber;
    referralCode: number;
    feeParams: [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      receivedAmount: BigNumber;
      fixFee: BigNumber;
      transferFee: BigNumber;
      useAssetFee: boolean;
      isNativeToken: boolean;
    };
    autoParams: string;
    nativeSender: string;
  }
>;

export type UnblockedEvent = TypedEvent<[string] & { submissionId: string }>;

export type WithdrawnFeeEvent = TypedEvent<
  [string, BigNumber] & { debridgeId: string; fee: BigNumber }
>;

export class IDeBridgeGateExtended extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDeBridgeGateExtendedInterface;

  functions: {
    callProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNativeInfo(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    globalFixedNativeFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    globalTransferFeeBps(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  callProxy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _debridgeId: BytesLike,
    _amount: BigNumberish,
    _chainIdFrom: BigNumberish,
    _receiver: string,
    _nonce: BigNumberish,
    _signatures: BytesLike,
    _autoParams: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  flash(
    _tokenAddress: string,
    _receiver: string,
    _amount: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDebridgeChainAssetFixedFee(
    _debridgeId: BytesLike,
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDefiAvaliableReserves(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNativeInfo(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  globalFixedNativeFee(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  globalTransferFeeBps(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isSubmissionUsed(
    submissionId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestReserves(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnReserves(
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  send(
    _tokenAddress: string,
    _amount: BigNumberish,
    _chainIdTo: BigNumberish,
    _receiver: BytesLike,
    _permit: BytesLike,
    _useAssetFee: boolean,
    _referralCode: BigNumberish,
    _autoParams: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFee(
    _debridgeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callProxy(overrides?: CallOverrides): Promise<string>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { nativeChainId: BigNumber; nativeAddress: string }
    >;

    globalFixedNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    globalTransferFeeBps(overrides?: CallOverrides): Promise<BigNumber>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AutoRequestExecuted(bytes32,bool,address)"(
      submissionId?: null,
      success?: boolean | null,
      callProxy?: null
    ): TypedEventFilter<
      [string, boolean, string],
      { submissionId: string; success: boolean; callProxy: string }
    >;

    AutoRequestExecuted(
      submissionId?: null,
      success?: boolean | null,
      callProxy?: null
    ): TypedEventFilter<
      [string, boolean, string],
      { submissionId: string; success: boolean; callProxy: string }
    >;

    "Blocked(bytes32)"(
      submissionId?: null
    ): TypedEventFilter<[string], { submissionId: string }>;

    Blocked(
      submissionId?: null
    ): TypedEventFilter<[string], { submissionId: string }>;

    "CallProxyUpdated(address)"(
      callProxy?: null
    ): TypedEventFilter<[string], { callProxy: string }>;

    CallProxyUpdated(
      callProxy?: null
    ): TypedEventFilter<[string], { callProxy: string }>;

    "ChainSupportUpdated(uint256,bool,bool)"(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): TypedEventFilter<
      [BigNumber, boolean, boolean],
      { chainId: BigNumber; isSupported: boolean; isChainFrom: boolean }
    >;

    ChainSupportUpdated(
      chainId?: null,
      isSupported?: null,
      isChainFrom?: null
    ): TypedEventFilter<
      [BigNumber, boolean, boolean],
      { chainId: BigNumber; isSupported: boolean; isChainFrom: boolean }
    >;

    "ChainsSupportUpdated(uint256,tuple,bool)"(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, boolean, number] & {
          fixedNativeFee: BigNumber;
          isSupported: boolean;
          transferFeeBps: number;
        },
        boolean
      ],
      {
        chainIds: BigNumber;
        chainSupportInfo: [BigNumber, boolean, number] & {
          fixedNativeFee: BigNumber;
          isSupported: boolean;
          transferFeeBps: number;
        };
        isChainFrom: boolean;
      }
    >;

    ChainsSupportUpdated(
      chainIds?: null,
      chainSupportInfo?: null,
      isChainFrom?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [BigNumber, boolean, number] & {
          fixedNativeFee: BigNumber;
          isSupported: boolean;
          transferFeeBps: number;
        },
        boolean
      ],
      {
        chainIds: BigNumber;
        chainSupportInfo: [BigNumber, boolean, number] & {
          fixedNativeFee: BigNumber;
          isSupported: boolean;
          transferFeeBps: number;
        };
        isChainFrom: boolean;
      }
    >;

    "Claimed(bytes32,bytes32,uint256,address,uint256,uint256,bytes,bool)"(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: string | null,
      nonce?: null,
      chainIdFrom?: BigNumberish | null,
      autoParams?: null,
      isNativeToken?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        boolean
      ],
      {
        submissionId: string;
        debridgeId: string;
        amount: BigNumber;
        receiver: string;
        nonce: BigNumber;
        chainIdFrom: BigNumber;
        autoParams: string;
        isNativeToken: boolean;
      }
    >;

    Claimed(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: string | null,
      nonce?: null,
      chainIdFrom?: BigNumberish | null,
      autoParams?: null,
      isNativeToken?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        boolean
      ],
      {
        submissionId: string;
        debridgeId: string;
        amount: BigNumber;
        receiver: string;
        nonce: BigNumber;
        chainIdFrom: BigNumber;
        autoParams: string;
        isNativeToken: boolean;
      }
    >;

    "FixedNativeFeeAutoUpdated(uint256)"(
      globalFixedNativeFee?: null
    ): TypedEventFilter<[BigNumber], { globalFixedNativeFee: BigNumber }>;

    FixedNativeFeeAutoUpdated(
      globalFixedNativeFee?: null
    ): TypedEventFilter<[BigNumber], { globalFixedNativeFee: BigNumber }>;

    "FixedNativeFeeUpdated(uint256,uint256)"(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { globalFixedNativeFee: BigNumber; globalTransferFeeBps: BigNumber }
    >;

    FixedNativeFeeUpdated(
      globalFixedNativeFee?: null,
      globalTransferFeeBps?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { globalFixedNativeFee: BigNumber; globalTransferFeeBps: BigNumber }
    >;

    "Flash(address,address,address,uint256,uint256)"(
      sender?: null,
      tokenAddress?: string | null,
      receiver?: string | null,
      amount?: null,
      paid?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        tokenAddress: string;
        receiver: string;
        amount: BigNumber;
        paid: BigNumber;
      }
    >;

    Flash(
      sender?: null,
      tokenAddress?: string | null,
      receiver?: string | null,
      amount?: null,
      paid?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        tokenAddress: string;
        receiver: string;
        amount: BigNumber;
        paid: BigNumber;
      }
    >;

    "MonitoringClaimEvent(bytes32,uint256,uint256)"(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        submissionId: string;
        lockedOrMintedAmount: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    MonitoringClaimEvent(
      submissionId?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        submissionId: string;
        lockedOrMintedAmount: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "MonitoringSendEvent(bytes32,uint256,uint256,uint256)"(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        submissionId: string;
        nonce: BigNumber;
        lockedOrMintedAmount: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    MonitoringSendEvent(
      submissionId?: null,
      nonce?: null,
      lockedOrMintedAmount?: null,
      totalSupply?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        submissionId: string;
        nonce: BigNumber;
        lockedOrMintedAmount: BigNumber;
        totalSupply: BigNumber;
      }
    >;

    "PairAdded(bytes32,address,bytes,uint256,uint256,uint16)"(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: BigNumberish | null,
      maxAmount?: null,
      minReservesBps?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, number],
      {
        debridgeId: string;
        tokenAddress: string;
        nativeAddress: string;
        nativeChainId: BigNumber;
        maxAmount: BigNumber;
        minReservesBps: number;
      }
    >;

    PairAdded(
      debridgeId?: null,
      tokenAddress?: null,
      nativeAddress?: null,
      nativeChainId?: BigNumberish | null,
      maxAmount?: null,
      minReservesBps?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, number],
      {
        debridgeId: string;
        tokenAddress: string;
        nativeAddress: string;
        nativeChainId: BigNumber;
        maxAmount: BigNumber;
        minReservesBps: number;
      }
    >;

    "Sent(bytes32,bytes32,uint256,bytes,uint256,uint256,uint32,tuple,bytes,address)"(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: BigNumberish | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
          receivedAmount: BigNumber;
          fixFee: BigNumber;
          transferFee: BigNumber;
          useAssetFee: boolean;
          isNativeToken: boolean;
        },
        string,
        string
      ],
      {
        submissionId: string;
        debridgeId: string;
        amount: BigNumber;
        receiver: string;
        nonce: BigNumber;
        chainIdTo: BigNumber;
        referralCode: number;
        feeParams: [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
          receivedAmount: BigNumber;
          fixFee: BigNumber;
          transferFee: BigNumber;
          useAssetFee: boolean;
          isNativeToken: boolean;
        };
        autoParams: string;
        nativeSender: string;
      }
    >;

    Sent(
      submissionId?: null,
      debridgeId?: BytesLike | null,
      amount?: null,
      receiver?: null,
      nonce?: null,
      chainIdTo?: BigNumberish | null,
      referralCode?: null,
      feeParams?: null,
      autoParams?: null,
      nativeSender?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        number,
        [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
          receivedAmount: BigNumber;
          fixFee: BigNumber;
          transferFee: BigNumber;
          useAssetFee: boolean;
          isNativeToken: boolean;
        },
        string,
        string
      ],
      {
        submissionId: string;
        debridgeId: string;
        amount: BigNumber;
        receiver: string;
        nonce: BigNumber;
        chainIdTo: BigNumber;
        referralCode: number;
        feeParams: [BigNumber, BigNumber, BigNumber, boolean, boolean] & {
          receivedAmount: BigNumber;
          fixFee: BigNumber;
          transferFee: BigNumber;
          useAssetFee: boolean;
          isNativeToken: boolean;
        };
        autoParams: string;
        nativeSender: string;
      }
    >;

    "Unblocked(bytes32)"(
      submissionId?: null
    ): TypedEventFilter<[string], { submissionId: string }>;

    Unblocked(
      submissionId?: null
    ): TypedEventFilter<[string], { submissionId: string }>;

    "WithdrawnFee(bytes32,uint256)"(
      debridgeId?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { debridgeId: string; fee: BigNumber }
    >;

    WithdrawnFee(
      debridgeId?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { debridgeId: string; fee: BigNumber }
    >;
  };

  estimateGas: {
    callProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNativeInfo(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    globalFixedNativeFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    globalTransferFeeBps(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callProxy(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _debridgeId: BytesLike,
      _amount: BigNumberish,
      _chainIdFrom: BigNumberish,
      _receiver: string,
      _nonce: BigNumberish,
      _signatures: BytesLike,
      _autoParams: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    flash(
      _tokenAddress: string,
      _receiver: string,
      _amount: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDebridgeChainAssetFixedFee(
      _debridgeId: BytesLike,
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefiAvaliableReserves(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNativeInfo(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    globalFixedNativeFee(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    globalTransferFeeBps(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isSubmissionUsed(
      submissionId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnReserves(
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    send(
      _tokenAddress: string,
      _amount: BigNumberish,
      _chainIdTo: BigNumberish,
      _receiver: BytesLike,
      _permit: BytesLike,
      _useAssetFee: boolean,
      _referralCode: BigNumberish,
      _autoParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFee(
      _debridgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
