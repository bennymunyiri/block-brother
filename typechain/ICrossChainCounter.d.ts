/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICrossChainCounterInterface extends ethers.utils.Interface {
  functions: {
    "receiveIncrementCommand(uint8,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "receiveIncrementCommand",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "receiveIncrementCommand",
    data: BytesLike
  ): Result;

  events: {
    "CounterIncremented(uint256,uint8,uint256,address)": EventFragment;
    "SupportedChainAdded(uint256,bytes)": EventFragment;
    "SupportedChainRemoved(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CounterIncremented"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedChainAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SupportedChainRemoved"): EventFragment;
}

export type CounterIncrementedEvent = TypedEvent<
  [BigNumber, number, BigNumber, string] & {
    newCounterValue: BigNumber;
    amount: number;
    chainFrom: BigNumber;
    initiator: string;
  }
>;

export type SupportedChainAddedEvent = TypedEvent<
  [BigNumber, string] & { chainId: BigNumber; incrementorAddress: string }
>;

export type SupportedChainRemovedEvent = TypedEvent<
  [BigNumber] & { chainId: BigNumber }
>;

export class ICrossChainCounter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICrossChainCounterInterface;

  functions: {
    receiveIncrementCommand(
      _amount: BigNumberish,
      _initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  receiveIncrementCommand(
    _amount: BigNumberish,
    _initiator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    receiveIncrementCommand(
      _amount: BigNumberish,
      _initiator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CounterIncremented(uint256,uint8,uint256,address)"(
      newCounterValue?: null,
      amount?: null,
      chainFrom?: null,
      initiator?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, string],
      {
        newCounterValue: BigNumber;
        amount: number;
        chainFrom: BigNumber;
        initiator: string;
      }
    >;

    CounterIncremented(
      newCounterValue?: null,
      amount?: null,
      chainFrom?: null,
      initiator?: null
    ): TypedEventFilter<
      [BigNumber, number, BigNumber, string],
      {
        newCounterValue: BigNumber;
        amount: number;
        chainFrom: BigNumber;
        initiator: string;
      }
    >;

    "SupportedChainAdded(uint256,bytes)"(
      chainId?: null,
      incrementorAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { chainId: BigNumber; incrementorAddress: string }
    >;

    SupportedChainAdded(
      chainId?: null,
      incrementorAddress?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { chainId: BigNumber; incrementorAddress: string }
    >;

    "SupportedChainRemoved(uint256)"(
      chainId?: null
    ): TypedEventFilter<[BigNumber], { chainId: BigNumber }>;

    SupportedChainRemoved(
      chainId?: null
    ): TypedEventFilter<[BigNumber], { chainId: BigNumber }>;
  };

  estimateGas: {
    receiveIncrementCommand(
      _amount: BigNumberish,
      _initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    receiveIncrementCommand(
      _amount: BigNumberish,
      _initiator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
